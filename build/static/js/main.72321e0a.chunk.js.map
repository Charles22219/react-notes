{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","content","onClick","axios","get","then","response","data","newObject","post","id","put","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","useEffect","noteService","initialNotes","notesToShow","filter","map","key","find","n","changedNote","returnedNote","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"6LAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UACf,qBAAuB,iBAC3B,OACE,4BACGH,EAAKI,QACN,4BAAQC,QAASJ,GAAmBC,K,gBCY3B,EAhBA,WAEb,OADgBI,IAAMC,IAHR,eAICC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAXA,SAAAC,GAEb,OADgBL,IAAMM,KARR,cAQsBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS5B,EANA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAbF,cAaE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC8D5BK,EA1EH,SAACC,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAESF,mBAC5B,iBAHmB,mBAEdG,EAFc,KAELC,EAFK,OAKSJ,oBAAS,GALlB,mBAKdK,EALc,KAKLC,EALK,KAOrBC,qBAAU,WACRC,IAEGjB,MAAK,SAAAkB,GACJP,EAASO,QAEZ,IAEH,IAmBMC,EAAcL,EAChBJ,EACAA,EAAMU,QAAO,SAAA5B,GAAI,OAAuB,IAAnBA,EAAKG,aAc9B,OACE,6BACE,qCACA,6BACE,4BAAQE,QAAS,kBAAMkB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BACGK,EAAYE,KAAI,SAAA7B,GAAI,OACnB,kBAAC,EAAD,CAAM8B,IAAK9B,EAAKa,GAAIb,KAAMA,EAAMC,iBAAkB,kBAtB/B,SAACY,GAC1B,IAAMb,EAAOkB,EAAMa,MAAK,SAAAC,GAAC,OAAIA,EAAEnB,KAAOA,KAChCoB,EAAW,2BAAQjC,GAAR,IAAcG,WAAYH,EAAKG,YAEhDsB,EACUZ,EAAIoB,GACXzB,MAAK,SAAA0B,GACJf,EAASD,EAAMW,KAAI,SAAA7B,GAAI,OAAIA,EAAKa,KAAOA,EAAKb,EAAOkC,SAeOC,CAAmBnC,EAAKa,WAGpF,0BAAMuB,SAhDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnC,QAASgB,EACToB,MAAM,IAAIC,MAAOC,cACjBvC,UAAWwC,KAAKC,SAAW,IAE7BnB,EAAmBc,GAChB/B,MAAK,SAAA0B,GACJf,EAASD,EAAM2B,OAAOX,IACtBb,EAAW,SAuCX,2BACEyB,MAAO1B,EACP2B,SArCiB,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzBzB,EAAWgB,EAAMa,OAAOJ,UAqCpB,4BAAQK,KAAK,UAAb,WCnERC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.72321e0a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/notes/'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState(\r\n    'a new note...'\r\n  )\r\n  const [showAll, setShowAll] = useState(false)\r\n\r\n  useEffect(() => {\r\n    noteService\r\n      .getAll()\r\n      .then(initialNotes => {\r\n        setNotes(initialNotes)\r\n      })\r\n  }, [])\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n    }\r\n    noteService.create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter(note => note.important === true)\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n    })\r\n  }\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map(note =>\r\n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)} />\r\n        )}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input\r\n          value={newNote}\r\n          onChange={handleNoteChange}\r\n        />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}